# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui_v1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QDialog, QFileDialog, QGraphicsScene
from PyQt5.uic import loadUi
import os
import numpy as np
import pydicom
import utils

class Ui_Dialog(QDialog):
    def __init__(self, Dialog):
        super().__init__()
        path = 'D:/lab/thyroid/thyroid-labeler-master'
        os.chdir(path)
        loadUi('labeler.ui', self)

        Dialog.setObjectName("Dialog")
        Dialog.resize(1129, 698)
        self.savecrop = QtWidgets.QPushButton(Dialog)
        self.savecrop.setGeometry(QtCore.QRect(790, 600, 71, 41))
        self.savecrop.setObjectName("savecrop")
        self.reset = QtWidgets.QPushButton(Dialog)
        self.reset.setGeometry(QtCore.QRect(870, 600, 71, 41))
        self.reset.setObjectName("reset")
        self.textEdit = QtWidgets.QTextEdit(Dialog)
        self.textEdit.setGeometry(QtCore.QRect(270, 590, 491, 71))
        self.textEdit.setObjectName("textEdit")
        self.textBrowser = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser.setGeometry(QtCore.QRect(20, 30, 381, 31))
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser_2 = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser_2.setGeometry(QtCore.QRect(570, 30, 381, 31))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.openfile_1 = QtWidgets.QPushButton(Dialog)
        self.openfile_1.setGeometry(QtCore.QRect(410, 30, 81, 31))
        self.openfile_1.setObjectName("openfile_1")
        self.openfile_2 = QtWidgets.QPushButton(Dialog)
        self.openfile_2.setGeometry(QtCore.QRect(960, 30, 81, 31))
        self.openfile_2.setObjectName("openfile_2")
        self.splitter = QtWidgets.QSplitter(Dialog)
        self.splitter.setGeometry(QtCore.QRect(20, 130, 1081, 411))
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.graphicsView_3 = QtWidgets.QGraphicsView(self.splitter)
        self.graphicsView_3.setObjectName("graphicsView_3")
        self.graphicsView_4 = QtWidgets.QGraphicsView(self.splitter)
        self.graphicsView_4.setObjectName("graphicsView_4")
        self.scene1 = QGraphicsScene()
        self.scene2 = QGraphicsScene()

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)


        self.openfile_1.clicked.connect(lambda: self.load_clicked(1))
        self.openfile_2.clicked.connect(lambda: self.load_clicked(2))
        self.dcm_image = None
        self.image = None
        self.imgr = None
        self.imgc = None



    def load_clicked(self, subwindow):
        print("suck")
        fname, _filter = QFileDialog.getOpenFileName(self, 'open file', '~/Desktop')
        if subwindow == 1:
            self.load_dicom_image(fname, 1)
            self.graphicsView_3.setScene(self.scene1)
            self.graphicsView_3.show()
        elif subwindow == 2:
            self.load_dicom_image(fname, 2)
            self.graphicsView_4.setScene(self.scene2)
            self.graphicsView_4.show()

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.savecrop.setText(_translate("Dialog", "cropsave"))
        self.reset.setText(_translate("Dialog", "reset"))
        self.openfile_1.setText(_translate("Dialog", "openfile"))
        self.openfile_2.setText(_translate("Dialog", "openfile"))

    def display_image(self, scene):
        qformat = QImage.Format_Grayscale16
        if scene == 1:
            view = self.graphicsView_3
            scene = self.scene1
        elif scene == 2:
            view = self.graphicsView_4
            scene = self.scene2
        w, h = view.width(), view.height()
        img = QImage(self.dcm_image, self.dcm_image.shape[1],
                     self.dcm_image.shape[0], qformat)
        backlash = view.lineWidth()*2
        scene.addPixmap(QPixmap.fromImage(img).scaled(w-backlash, h-backlash, Qt.IgnoreAspectRatio))
        view.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)

    def load_dicom_image(self, fname, scene):
        dcm = pydicom.dcmread(fname, force=True)
        dcm.file_meta.TransferSyntaxUID = pydicom.uid.ImplicitVRLittleEndian
        print(np.nanmax(dcm.pixel_array), np.nanmin(dcm.pixel_array))
        self.image = dcm.pixel_array.astype(np.uint8)
        self.dcm_image = self.image.copy()
        self.imgr, self.imgc = self.dcm_image.shape[0:2]
        self.display_image(scene)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
